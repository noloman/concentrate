buildscript {
    repositories {
        maven { url 'https://maven.fabric.io/public' }
        maven { url "https://maven.google.com" }
    }

    dependencies {
        classpath 'io.fabric.tools:gradle:1.+'
    }
}
apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'io.fabric'

repositories {
    maven { url 'https://maven.fabric.io/public' }
    mavenCentral()
}

def keystorePropertiesFile = rootProject.file("keystore.properties")
def keystoreProperties = new Properties()
keystoreProperties.load(new FileInputStream(keystorePropertiesFile))

android {
    signingConfigs {
        kittentrate {
            keyAlias keystoreProperties['keyAlias']
            keyPassword keystoreProperties['keyPassword']
            storeFile file(keystoreProperties['storeFile'])
            storePassword keystoreProperties['storePassword']
        }
    }
    compileSdkVersion 26
    buildToolsVersion "25.0.3"
    defaultConfig {
        applicationId "manulorenzo.me.kittentrate"
        minSdkVersion 15
        targetSdkVersion 26
        versionCode 2
        versionName "1.0"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        vectorDrawables.useSupportLibrary = true
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    lintOptions {
        abortOnError false
    }

    buildTypes {
        debug {
            minifyEnabled false
        }
        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.kittentrate
        }
    }

    flavorDimensions "mode"
    productFlavors {
        mock {
            dimension "mode"
            applicationIdSuffix ".mock"
            manifestPlaceholders = [fabricApiKeyValue: keystoreProperties["fabricApiKeyValue"]]
        }
        prod {
            dimension "mode"
            manifestPlaceholders = [fabricApiKeyValue: keystoreProperties["fabricApiKeyValue"]]
        }
    }
    buildTypes.each {
        it.buildConfigField 'String', 'FLICKR_API_KEY', keystoreProperties['FlickrApiKey']
    }
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])

    androidTestCompile("com.android.support.test.espresso:espresso-core:$espressoVersion", {
        exclude group: 'com.android.support', module: 'support-annotations'
    })
    androidTestCompile('com.android.support.test:runner:0.5') {
        // Necessary if your app targets Marshmallow (since the test runner
        // hasn't moved to Marshmallow yet)
        exclude group: 'com.android.support', module: 'support-annotations'
    }
    androidTestCompile('com.android.support.test.espresso:espresso-contrib:2.2') {
        // Necessary to avoid version conflicts
        exclude group: 'com.android.support', module: 'appcompat'
        exclude group: 'com.android.support', module: 'support-v4'
        exclude group: 'com.android.support', module: 'support-annotations'
        exclude module: 'recyclerview-v7'
    }
    compile "com.android.support:recyclerview-v7:$androidSupportLibraryVersion"
    compile "com.android.support:cardview-v7:$androidSupportLibraryVersion"
    compile "com.android.support:appcompat-v7:$androidSupportLibraryVersion"
    compile "com.android.support:design:$androidSupportLibraryVersion"
    compile "com.android.support:support-v4:$androidSupportLibraryVersion"
    compile "com.android.support:design:$androidSupportLibraryVersion"
    compile "com.android.support:recyclerview-v7:$androidSupportLibraryVersion"
    compile "com.github.bumptech.glide:glide:$glideVersion"

    compile "com.jakewharton:butterknife:$butterknifeVersion"
    annotationProcessor "com.jakewharton:butterknife-compiler:$butterknifeVersion"

    compile "com.google.code.gson:gson:$gsonVersion"
    compile "com.squareup.retrofit2:retrofit:$retrofitVersion"
    compile "com.squareup.retrofit2:converter-gson:$retrofitVersion"
    compile "com.squareup.okhttp3:logging-interceptor:$squareLoggingInterceptorVersion"

    debugCompile "com.squareup.leakcanary:leakcanary-android:$leakCanaryVersion"
    testCompile "com.squareup.leakcanary:leakcanary-android:$leakCanaryVersion"
    releaseCompile "com.squareup.leakcanary:leakcanary-android-no-op:$leakCanaryVersion"

    compile("com.crashlytics.sdk.android:crashlytics:$crashlyticsVersion@aar") {
        transitive = true
    }

    testCompile "junit:junit:$jUnitVersion"
    testCompile "org.mockito:mockito-core:$mockitoVersion"
    compile "org.jetbrains.kotlin:kotlin-stdlib-jre7:$kotlinVersion"
}

configurations.all {
    resolutionStrategy.eachDependency { DependencyResolveDetails details ->
        def requested = details.requested
        if (requested.group == 'com.android.support') {
            if (!requested.name.startsWith("multidex")) {
                details.useVersion "$androidSupportLibraryVersion"
            }
        }
    }
}