buildscript {
    repositories {
        maven { url 'https://maven.fabric.io/public' }
        maven { url "https://maven.google.com" }
    }

    dependencies {
        classpath 'io.fabric.tools:gradle:1.+'
    }
}
apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'io.fabric'
apply plugin: 'kotlin-kapt'

repositories {
    maven { url 'https://maven.fabric.io/public' }
    mavenCentral()
}

def keystorePropertiesFile = rootProject.file("keystore.properties")
def keystoreProperties = new Properties()
if (keystorePropertiesFile.exists() && keystorePropertiesFile.canRead()) {
    keystoreProperties.load(new FileInputStream(keystorePropertiesFile))
}

// Generate a minor version code from git commit count (ideally for prod builds in small scale projects)

static def generateVersionCode() {
    def result = "git rev-list HEAD --count".execute().text.trim() //unix
    if(result.empty) throw new RuntimeException("Could not generate versioncode on this platform? Cmd output: ${result.text}")
    return result.toInteger()
}

def majorVersion = 1

android {
    signingConfigs {
        release
    }
    compileSdkVersion 27
    buildToolsVersion '27.0.3'
    defaultConfig {
        applicationId "manulorenzo.me.kittentrate"
        minSdkVersion 15
        targetSdkVersion 27
        versionCode generateVersionCode()
        versionName "${majorVersion}.${getVersionCode()}"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        vectorDrawables.useSupportLibrary = true

        // used by Room, to test migrations
        javaCompileOptions {
            annotationProcessorOptions {
                arguments = ["room.schemaLocation":
                                     "$projectDir/schemas".toString()]
            }
        }
        if (keystorePropertiesFile != null &&
                keystorePropertiesFile.canRead() &&
                keystoreProperties.containsKey("fabricApiKeyValue")) {
            buildConfigField "String", "FLICKR_API_KEY", keystoreProperties["FlickrApiKey"]
        } else {
            buildConfigField "String", "FLICKR_API_KEY", System.getenv("FlickrApiKey")
        }
    }
    dexOptions {
        javaMaxHeapSize "4g"
    }
    // used by Room, to test migrations
    sourceSets {
        androidTest.assets.srcDirs +=
                files("$projectDir/schemas".toString())
        mock { java.srcDirs = ['src/mock/java', 'src/mock/java/'] }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    lintOptions {
        abortOnError false
    }

    buildTypes {
        debug {
            minifyEnabled false
        }
        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
        }
    }

    flavorDimensions "mode"
    productFlavors {
        mock {
            dimension "mode"
            applicationIdSuffix ".mock"
            if (keystorePropertiesFile != null
                    && keystorePropertiesFile.canRead() &&
                    keystoreProperties.containsKey("fabricApiKeyValue")) {
                manifestPlaceholders = [fabricApiKeyValue: keystoreProperties["fabricApiKeyValue"]]
            } else {
                manifestPlaceholders = [fabricApiKeyValue: System.getenv("fabricApiKeyValue")]
            }
        }
        prod {
            dimension "mode"
            if (keystorePropertiesFile != null &&
                    keystorePropertiesFile.canRead() &&
                    keystoreProperties.containsKey("fabricApiKeyValue")) {
                manifestPlaceholders = [fabricApiKeyValue: keystoreProperties["fabricApiKeyValue"]]
            } else {
                manifestPlaceholders = [fabricApiKeyValue: System.getenv("fabricApiKeyValue")]
            }
        }
    }
}

if (keystorePropertiesFile != null
        && keystorePropertiesFile.canRead()
        && keystoreProperties.containsKey('keyAlias')
        && keystoreProperties.containsKey('keyPassword')
        && keystoreProperties.containsKey('storeFile')
        && keystoreProperties.containsKey('storePassword')) {
    android.signingConfigs.release.keyAlias keystoreProperties['keyAlias']
    android.signingConfigs.release.keyPassword keystoreProperties['keyPassword']
    android.signingConfigs.release.storeFile file(keystoreProperties['storeFile'])
    android.signingConfigs.release.storePassword keystoreProperties['storePassword']
} else if (keystorePropertiesFile != null
        && keystorePropertiesFile.canRead()
        && keystoreProperties.containsKey('BITRISEIO_ANDROID_KEYSTORE_ALIAS')
        && keystoreProperties.containsKey('BITRISEIO_ANDROID_KEYSTORE_PRIVATE_KEY_PASSWORD')
        && keystoreProperties.containsKey('$BITRISEIO_ANDROID_KEYSTORE_PASSWORD')) {
    keyAlias System.getenv("BITRISEIO_ANDROID_KEYSTORE_ALIAS")
    keyPassword System.getenv("BITRISEIO_ANDROID_KEYSTORE_PRIVATE_KEY_PASSWORD")
    storeFile file(System.getenv("HOME") + "/keystores/my_keystore.jks")
    storePassword System.getenv("BITRISEIO_ANDROID_KEYSTORE_PASSWORD")
} else {
    android.signingConfigs.release.keyAlias System.getenv("keyAlias")
    android.signingConfigs.release.keyPassword System.getenv("keyPassword")
    android.signingConfigs.release.storePassword System.getenv("storePassword")
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])

    // Dagger 2
    implementation "com.google.dagger:dagger-android:$daggerVersion"
    kapt "com.google.dagger:dagger-compiler:$daggerVersion"

    androidTestImplementation("com.android.support.test.espresso:espresso-core:$espressoVersion", {
        exclude group: 'com.android.support', module: 'support-annotations'
    })
    androidTestImplementation('com.android.support.test:runner:0.5') {
        // Necessary if your app targets Marshmallow (since the test runner
        // hasn't moved to Marshmallow yet)
        exclude group: 'com.android.support', module: 'support-annotations'
    }
    androidTestImplementation('com.android.support.test.espresso:espresso-contrib:2.2') {
        // Necessary to avoid version conflicts
        exclude group: 'com.android.support', module: 'appcompat'
        exclude group: 'com.android.support', module: 'support-v4'
        exclude group: 'com.android.support', module: 'support-annotations'
        exclude module: 'recyclerview-v7'
    }
    implementation "com.android.support:recyclerview-v7:$androidSupportLibraryVersion"
    implementation "com.android.support:cardview-v7:$androidSupportLibraryVersion"
    implementation "com.android.support:appcompat-v7:$androidSupportLibraryVersion"
    implementation "com.android.support:design:$androidSupportLibraryVersion"
    implementation "com.android.support:support-v4:$androidSupportLibraryVersion"
    implementation "com.android.support:design:$androidSupportLibraryVersion"
    implementation "com.android.support:recyclerview-v7:$androidSupportLibraryVersion"
    implementation "com.github.bumptech.glide:glide:$glideVersion"
    implementation "io.reactivex.rxjava2:rxjava:$rxJavaVersion"
    implementation "io.reactivex.rxjava2:rxandroid:$rxAndroidVersion"
    implementation "io.reactivex.rxjava2:rxkotlin:$rxKotlinVersion"

    implementation "com.jakewharton:butterknife:$butterknifeVersion"
    annotationProcessor "com.jakewharton:butterknife-compiler:$butterknifeVersion"
    kapt "com.jakewharton:butterknife-compiler:$butterknifeVersion"

    implementation "com.google.code.gson:gson:$gsonVersion"
    implementation "com.squareup.retrofit2:retrofit:$retrofitVersion"
    implementation "com.squareup.retrofit2:converter-gson:$retrofitVersion"
    implementation 'com.jakewharton.retrofit:retrofit2-rxjava2-adapter:1.0.0'
    implementation "com.squareup.okhttp3:logging-interceptor:$squareLoggingInterceptorVersion"

    // LeakCanary
    debugImplementation "com.squareup.leakcanary:leakcanary-android:$leakCanaryVersion"
    testImplementation "com.squareup.leakcanary:leakcanary-android:$leakCanaryVersion"
    releaseImplementation "com.squareup.leakcanary:leakcanary-android-no-op:$leakCanaryVersion"
    // Robolectric
    testImplementation "org.robolectric:robolectric:$robolectricVersion"
    androidTestImplementation "org.robolectric:robolectric:$robolectricVersion"

    // Room
    implementation "android.arch.persistence.room:runtime:$roomVersion"
    annotationProcessor "android.arch.persistence.room:compiler:$roomVersion"
    kapt "android.arch.persistence.room:compiler:$roomVersion"
    androidTestImplementation "android.arch.persistence.room:testing:$roomVersion"
    implementation "android.arch.persistence.room:rxjava2:$roomVersion"

    // Lifecycle AAC
    implementation "android.arch.lifecycle:runtime:$lifecycleVersion"
    // not necessary if you are using lifecycle:extensions or lifecycle:common-java8
    annotationProcessor "android.arch.lifecycle:compiler:$lifecycleVersion"
    kapt "android.arch.lifecycle:compiler:$lifecycleVersion"
    // not needed if you are using the DefaultLifecycleObserver from common-java8 artifact.
    implementation "android.arch.lifecycle:common-java8:$lifecycleVersion"

    // LiveModel and DataModel
    implementation "android.arch.lifecycle:extensions:$lifecycleVersion"
    testImplementation "android.arch.core:core-testing:$lifecycleVersion"
    implementation "android.arch.lifecycle:reactivestreams:$lifecycleVersion"

    // Crashlytics
    implementation("com.crashlytics.sdk.android:crashlytics:$crashlyticsVersion@aar") {
        transitive = true
    }

    // junit
    testImplementation "junit:junit:$jUnitVersion"

    // Mockito Kotlin
    testImplementation "com.nhaarman:mockito-kotlin:$mockitoKotlinVersion"
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jre8:$kotlinVersion"
}

configurations.all {
    resolutionStrategy.eachDependency { DependencyResolveDetails details ->
        def requested = details.requested
        if (requested.group == 'com.android.support') {
            if (!requested.name.startsWith("multidex")) {
                details.useVersion "$androidSupportLibraryVersion"
            }
        }
    }
}
